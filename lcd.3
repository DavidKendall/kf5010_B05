.\" Process this file with
.\" groff -man -Tutf8 lcd.3
.\"
.TH LCD 3 "September 2017" Unix "Library User Manual"
.SH NAME
liblcd \- LCD and LED library for KF5010
.SH SYNOPSIS
.I #include <lcd.h>

.BI "int lcdinit(void);"
.br
.BI "void lcdsetpos(int " row ", int " column ");"
.br
.BI "void lcdsetcolour(int " foreground " , int " background ");"
.br
.BI "void lcdsetattr(int " attributes ");"
.br
.BI "void lcdunsetattr(int " attributes ");"
.br
.BI "int  lcdwrite(const char *" fmt "," ... ");"
.br
.BI "void LEDon(int " n ");"
.br
.BI "void LEDoff(int " n ");"
.br
.BI "int ispressed(int " bu ");"

.SH DESCRIPTION
.B liblcd
is a library that provides a quick simulation of an LCD display, a set of
coloured LEDs, and push-button input.

To build against the library use the
.B \-L
flag to include the directory where
.I liblcd.a
lies (usually the same as the source file
.B \-L .
)
.TP
.B ind lcdinit( void );
Initialises the LCD.  Starts the curses environment and sets out the screen.
.TP
.BI "void lcdsetpos(int " row ", int " column ");"
Sets the cursor position on the LCD screen.
.TP
.BI "void lcdsetcolour(int " foreground " , int " background ");"
Sets the current
.I foreground
and
.I background
colours of the screen for subsequent writing.  If you want to just set the
.I foreground
colour, you will have to keep track of the
.I background
colour and set that as well.
Values are as for
.B curs_color(3x)
For a quick visual guide, these are identical to the 256 extended ANSI colours.
https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
.br
\fB 0x00-0x07\fR:  standard colors
\fB 0x08-0x0F\fR:  high intensity colors
\fB 0x10-0xE7\fR:  6 * 6 * 6 cube (216 colors):
.br
              16 + 36 * r + 6 * g + b (0 <= r, g, b <= 5)
\fB 0xE8-0xFF\fR:  grayscale from black to white in 24 steps
.TP
.BI "void lcdsetattr(int " attributes ");"
Sets the attributes for the text using the following values.  Text is now printed with the properties set.
.br
\fB A_NORMAL    \fR Normal display (no highlight)
.br
\fB A_STANDOUT  \fR Best highlighting mode of the terminal.
.br
\fB A_UNDERLINE \fR Underlining
.br
\fB A_REVERSE   \fR Reverse video
.br
\fB A_BLINK     \fR Blinking
.br
\fB A_DIM       \fR Half bright
.br
\fB A_BOLD      \fR Extra bright or bold
.br
\fB A_INVIS    \fR Invisible or blank mode
.br
These are the values straight from the
.B curses
library
.B curs_attr(3x)
.TP
.BI "void lcdunsetattr(int " attributes ");"
Unsets the attributes about.  Turns off the properties for subsequent
printing.
.TP
.BI "int  lcdwrite(const char *" fmt "," ... ");"
Writes to the LCD.  In all other respects identical to
.B printf(3)
.TP
.BI "void LEDon(int " n ");"
Turns on an LED, 0 <= n <+ 3
.TP
.BI "void LEDoff(int " n ");"
Turns off an LED, 0 <= n <+ 3
.TP
.BI "int ispressed(int " button ");"
Returns true if a button is pressed.  The
.I button
can be an ASCII character 'a'
or one of the key pad constants from curses
.B curs_getch(3x)
.br
\fB KEY_DOWN    \fR The arrow keys ...
.br
\fB KEY_UP
.br
\fB KEY_LEFT
.br
\fB KEY_RIGHT
.SH FILES
The header file
.I lcd.h
includes the curses header file
.I curses.h
to make the attribute and key constants available for the program
.SH ENVIRONMENT
Uses the
.B curses
library.
.TP
On Linux Machines
Link to the ncurses library with wide character support
.br
    cc \fIsource\fR -lncursesw
.TP
On Macs (OSX)
Link to the curses library
.br
    cc \fIsource\fR -lcurses
.SH DIAGNOSTICS
If you want to use
.B printf
diagnostics in your program.
Write messages to
.B stderr

 fprintf(stderr,"%s:%d diagnostic n=%d\n",__FILE__,__LINE__, n );

Have two terminals open, if they are ttys01 and ttys02 (from
.B who am i
).  In ttys01 run the program and redirect the standard error to the other terminal

  ./program 2> /dev/ttys02

.SH AUTHOR
Dr Alun Moon <alun.moon@northumbria.ac.uk>
